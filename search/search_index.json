{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Google SRE Handbook","text":"<p>This site is a curated collection of concepts, practices, and tools inspired by Google's Site Reliability Engineering principles.</p> <p>Whether you're a DevOps engineer, SRE practitioner, or a curious technologist, this handbook provides a practical and actionable guide to building reliable, scalable, and resilient systems.</p>"},{"location":"#what-youll-find-here","title":"\ud83d\udd0d What You'll Find Here","text":"<ul> <li>Core SRE Principles \u2013 Definitions of SRE, SLIs, SLOs, SLAs, and Error Budgets</li> <li>Operational Excellence \u2013 Incident management, toil reduction, and production readiness</li> <li>Engineering Practices \u2013 CI/CD safety, release engineering, capacity planning</li> <li>Observability \u2013 Monitoring, telemetry, and tracing fundamentals</li> <li>Culture and Risk \u2013 How SREs think about failure, risk, and team collaboration</li> <li>Toolchains \u2013 Real-world tooling examples used by SRE teams</li> </ul>"},{"location":"#who-this-is-for","title":"\ud83d\udcd8 Who This Is For","text":"<ul> <li>Engineers building and operating production systems</li> <li>SRE teams defining or improving their practices</li> <li>Developers aiming to contribute to reliability goals</li> <li>Tech leads and architects evaluating SRE adoption</li> </ul>"},{"location":"#how-to-navigate","title":"\ud83d\udcc2 How to Navigate","text":"<p>Use the navigation panel to the left to browse by topic. Each section is written in a concise, example-driven way to help you quickly grasp and apply SRE principles.</p> <p>Happy learning!</p> <p>\u2014 Vibhor Chhabra \"\"\"</p>"},{"location":"Error_Budget_Summary/","title":"Error Budget \u2013 Deep Dive","text":""},{"location":"Error_Budget_Summary/#simple-definition","title":"Simple Definition","text":"<p>An Error Budget is the allowed amount of failure your system can have without violating its SLO (Service Level Objective).</p> <p>If your SLO is 99.9% availability, your error budget is 0.1%.</p> <p>It\u2019s the margin for risk you\u2019re willing to tolerate while maintaining user trust.</p>"},{"location":"Error_Budget_Summary/#why-error-budgets-matter","title":"Why Error Budgets Matter","text":"<p>Error budgets help balance: - Stability (keeping services reliable) - Innovation (deploying new features)</p> <p>If your service is too unreliable and exceeds the budget: - You pause risky changes - Focus on fixing issues</p> <p>If you stay within the budget: - You can push new updates - Take calculated risks</p>"},{"location":"Error_Budget_Summary/#how-to-calculate-an-error-budget","title":"\ud83d\udd22 How to Calculate an Error Budget","text":""},{"location":"Error_Budget_Summary/#example","title":"Example:","text":"<ul> <li>SLO = 99.9% over 30 days</li> <li>Total minutes in 30 days = 43,200 minutes</li> <li>Error Budget = 0.1% of 43,200 = 43.2 minutes of downtime allowed</li> </ul> <p>You can also calculate it for: - Requests: 0.1% of 1 million = 1,000 allowed failures - API errors, latency violations, etc.</p>"},{"location":"Error_Budget_Summary/#example-breakdown","title":"\ud83d\udcca Example Breakdown","text":"Metric Value SLO 99.9% availability Total time in month 43,200 minutes Allowed downtime 43.2 minutes If system is down for 20 mins \u2705 Still within budget If system is down for 60 mins \u274c Exceeds budget (violation)"},{"location":"Error_Budget_Summary/#best-practices-with-error-budgets","title":"\ud83e\udde0 Best Practices with Error Budgets","text":"<ul> <li>Monitor usage regularly with dashboards</li> <li>Tie deployment policies to error budget health</li> <li>Use it as a trigger for blameless postmortems</li> <li>Avoid overengineering by not aiming for 100% if not required</li> </ul>"},{"location":"Error_Budget_Summary/#summary","title":"\ud83e\udded Summary","text":"Term Meaning SLO The target level of service Error Budget How much you're allowed to fail before breaking the SLO Budget Burn How much of the error budget has already been used <p>Error budgets bring objectivity to decisions around reliability vs speed.</p>"},{"location":"SLI_Detailed/","title":"\ud83d\udcc8 Service Level Indicator (SLI) \u2013 Deep Dive","text":""},{"location":"SLI_Detailed/#what-is-an-sli","title":"What is an SLI?","text":"<p>A Service Level Indicator (SLI) is a carefully defined quantitative measure of some aspect of the level of service that is provided. SLIs are the foundation of SLOs and SLAs, and they help in assessing whether users are experiencing the desired reliability and performance.</p> <p>SLI is a specific measurement that tells you how well a service is working from the user\u2019s point of view.</p>"},{"location":"SLI_Detailed/#characteristics-of-a-good-sli","title":"Characteristics of a Good SLI","text":"<ul> <li>User-Centric: Reflects the user's experience with the service</li> <li>Quantifiable: Can be measured with real metrics</li> <li>Relevant: Maps to critical service behavior</li> <li>Actionable: Enables alerting, improvements, or incident response</li> </ul>"},{"location":"SLI_Detailed/#common-sli-types","title":"Common SLI Types","text":"<ul> <li>Availability \u2013 How often is the service reachable?</li> <li>Latency \u2013 How fast is the service?</li> <li>Error Rate \u2013 How frequently does it fail?</li> <li>Durability \u2013 Is data safe and not corrupted?</li> <li>Freshness \u2013 Is data up-to-date?</li> </ul>"},{"location":"SLI_Detailed/#sli-formula-example","title":"SLI Formula Example","text":"<pre><code>SLI = (Number of successful requests / Total requests) * 100\n</code></pre>"},{"location":"SLI_Detailed/#example-slis-by-service-type","title":"\ud83d\uddc2\ufe0f Example SLIs by Service Type","text":"Service Type Example SLIs Web APIs / Backend Services HTTP success rate, request latency, error rate User-Facing Web Applications Page load time, JS errors/session, navigation success rate Mobile Apps API latency, crash rate, sync latency Authentication Services Login success rate, authentication time, timeout rate Data Pipelines / ETL Jobs Data freshness, pipeline success rate, processing delay CI/CD Services Pipeline provision success, execution time, rollback rate Messaging / Notification Systems Message delivery rate, latency, duplication/drop rate Database Services Query success rate, latency, transaction failure rate File/Storage Services Retrieval success rate, download latency, data corruption rate Streaming / Real-time Services Stream start time, buffering ratio, dropped frames Search Services Search latency, result relevance, query failure rate Email / Communication Services Delivery time, bounce rate, spam/marked message rate"},{"location":"SLO_Deep_Dive/","title":"Service Level Objective (SLO) \u2013 Explained","text":""},{"location":"SLO_Deep_Dive/#simple-definition","title":"Simple Definition","text":"<p>SLO (Service Level Objective) is a target or goal that tells you how good your service should be, based on a specific measurement (SLI).</p> <p>Example: \"We want our website to load within 1 second at least 99.9% of the time.\"</p>"},{"location":"SLO_Deep_Dive/#what-is-an-slo","title":"What is an SLO?","text":"<p>An SLO is a reliability goal derived from an SLI. It defines: - What level of service is acceptable - Over what time window it should be measured</p>"},{"location":"SLO_Deep_Dive/#sli-vs-slo-example","title":"SLI vs. SLO Example","text":"SLI (What You Measure) SLO (What You Aim For) 99.2% requests successful 99.9% success over 30 days 85% queries &lt; 200ms 95% in &lt; 200ms over 7 days 0.01% error rate Max 0.1% errors over 30 days"},{"location":"SLO_Deep_Dive/#why-slos-matter","title":"\ud83e\udde0 Why SLOs Matter","text":"<ul> <li>Sets realistic reliability goals</li> <li>Helps with alerting and error budgets</li> <li>Supports decision-making on features vs reliability</li> <li>Prevents overengineering</li> </ul>"},{"location":"SLO_Deep_Dive/#slo-time-windows","title":"\ud83d\udd53 SLO Time Windows","text":"<p>SLOs are always time-bound: - Rolling window (e.g., last 30 days) - Calendar-based (e.g., this month)</p>"},{"location":"SLO_Deep_Dive/#real-world-example","title":"\ud83d\udee0\ufe0f Real-World Example","text":"<p>\"Login API should respond in under 300ms 99.95% of the time over the past 30 days.\"</p> <p>This guides teams on whether the system is performing well enough or needs attention.</p>"},{"location":"SLO_Deep_Dive/#summary","title":"\ud83e\udded Summary","text":"Concept Definition SLI What you measure (e.g., latency, error rate) SLO What you aim to achieve for that metric <p>Overengineering means designing or building a solution that is more complex, costly, or powerful than necessary to solve the actual problem.</p>"},{"location":"SRE_Definition_Google_Summary/","title":"Google SRE","text":""},{"location":"SRE_Definition_Google_Summary/#what-is-site-reliability-engineering-sre","title":"What is Site Reliability Engineering (SRE)?","text":"<p>Site Reliability Engineering (SRE) is a discipline that applies software engineering practices to infrastructure and operations tasks. The goal is to build systems that are scalable, automated, and highly reliable.</p>"},{"location":"SRE_Definition_Google_Summary/#example-software-engineering-practices-used-in-sre","title":"\ud83d\udd27 Example: Software Engineering Practices Used in SRE","text":"Practice How It's Used in SRE Coding &amp; Automation Writing scripts or tools to automate deployments, backups, scaling, etc. Version Control Managing infrastructure with tools like Git and Terraform Testing Using automated tests for infrastructure and CI/CD pipelines Code Reviews Reviewing operational changes such as configuration files or deployment logic Design Patterns Applying patterns for high availability, fault tolerance, and resilience"},{"location":"SRE_Definition_Google_Summary/#core-principles","title":"\ud83d\udd39 Core Principles","text":"<ul> <li> <p>Embrace Risk: Error budgets, Service Level Objectives (SLOs)</p> </li> <li> <p>Service Level Management: SLOs, SLIs, SLAs</p> </li> <li> <p>Eliminate Toil: Automate repetitive tasks</p> </li> <li> <p>Monitoring &amp; Alerting</p> </li> <li> <p>Release Engineering &amp; CI/CD</p> </li> <li> <p>Incident Management &amp; Postmortems</p> </li> <li> <p>Capacity Planning &amp; Scaling</p> </li> <li> <p>Production Readiness Reviews</p> </li> </ul>"},{"location":"SRE_Definition_Google_Summary/#key-characteristics-of-googles-sre-approach","title":"Key Characteristics of Google's SRE Approach","text":"Principle Description Engineering-Focused Ops Use code to automate and improve operations Service-Level Objectives Define and measure reliability with SLIs, SLOs, and error budgets Blameless Culture Learn from failures without assigning blame Toil Elimination Reduce manual and repetitive work through automation Balance Risk and Velocity Allow fast innovation while maintaining acceptable reliability"}]}